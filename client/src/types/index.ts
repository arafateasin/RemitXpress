// User Types
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone?: string;
  role?: string; // Add missing role property
  kycStatus: "pending" | "approved" | "rejected";
  isVerified: boolean;
  createdAt: string;
  updatedAt: string;
}

// Authentication Types
export interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  pendingUserId: string | null;
}

export interface LoginCredentials {
  email: string;
  password: string;
  deviceFingerprint?: string;
}

export interface RegisterCredentials {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  confirmPassword: string;
}

// Transaction Types
export interface Transaction {
  id: string;
  _id: string; // Add MongoDB _id for compatibility
  senderId: string;
  senderName: string;
  receiver: Receiver;
  recipient?: Receiver; // Add alias for compatibility
  amount: number;
  currency: string;
  deliveryMethod: string;
  paymentMethod: string;
  bank?: string;
  fees: FeeBreakdown;
  transactionId: string;
  timestamp: string;
  createdAt: string; // Add missing createdAt
  status: "pending" | "processing" | "completed" | "failed" | "cancelled";
  type: "send" | "receive";
}

export interface Receiver {
  id?: string;
  name?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phone: string;
  country: string;
  countryCode?: string;
  address?: string;
  city?: string;
  postalCode?: string;
  lastUsed?: string;
}

// Additional types for SendMoney component
export interface SavedReceiver {
  id: string;
  name: string;
  country: string;
  countryCode: string;
  phone: string;
  email: string;
  lastUsed: string;
}

export interface NewReceiverData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  country: string;
  address: string;
  city: string;
  postalCode: string;
}

export interface BankData {
  id: string;
  name: string;
  description: string;
}

// Transaction creation data (without _id and createdAt which are generated by backend)
export interface TransactionCreateData {
  id: string;
  senderId: string;
  senderName: string;
  receiver: Receiver | SavedReceiver | NewReceiverData;
  amount: number;
  currency: string;
  deliveryMethod: string;
  paymentMethod: string;
  bank?: string;
  fees: FeeBreakdown;
  transactionId: string;
  timestamp: string;
  status: "pending" | "processing" | "completed" | "failed" | "cancelled";
  type: "send" | "receive";
}

// Transaction data alias for backward compatibility
export type TransactionData = TransactionCreateData;

// Redux root state type
export interface RootState {
  auth: AuthState;
  transactions: {
    transactions: Transaction[];
    exchangeRates: any; // Add missing exchangeRates
    isLoading: boolean;
    error: string | null;
  };
  wallet: WalletState;
}

export interface FeeBreakdown {
  businessFee: number;
  paymentMethodFee: number;
  currencyConversionFee: number;
  exchangeFee: number; // Add missing exchangeFee
  totalFees: number;
  totalFee: number; // Add alias for compatibility
  total: number; // Add missing total
  receiverAmount: number; // Add missing receiverAmount
}

// Wallet Types
export interface WalletState {
  isConnected: boolean;
  address: string | null;
  balance: string | null;
  network: string | null;
  isLoading: boolean;
  error: string | null;
}

// API Response Types
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  error?: string;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// Form Types
export interface SendMoneyFormData {
  receiver: Receiver;
  amount: string;
  currency: string;
  deliveryMethod: string;
  paymentMethod: string;
  bank?: string;
}

// Payment Method Types
export interface PaymentMethod {
  id: string;
  name: string;
  fee: number | null;
  popular: boolean;
  icon: string;
  description: string;
}

export interface DeliveryMethod {
  id: string;
  name: string;
  description: string;
  time: string;
  rate: number;
  popular: boolean;
  icon: string;
}

// KYC Types
export interface KYCData {
  fullName: string;
  dateOfBirth: string;
  nationality: string;
  phoneNumber: string;
  address: string;
  city: string;
  postalCode: string;
  country: string;
  documentType: "passport" | "ic" | "drivers_license";
  documentNumber: string;
  documentFile: File | null;
  selfieFile: File | null;
  occupation: string;
  sourceOfFunds: string;
  monthlyIncome: string;
  purposeOfAccount: string;
}

// Exchange Rate Types
export interface ExchangeRates {
  base: string;
  rates: Record<string, Record<string, number>>;
  timestamp: string;
}

// Balance Types
export interface Balance {
  currency: string;
  amount: number;
  usdValue: number;
}

// Error Types
export interface ErrorResponse {
  error: string;
  message: string;
  statusCode: number;
}

// Component Props Types
export interface SocialLoginButtonsProps {
  onGoogleLogin: () => void;
  onFacebookLogin: () => void;
  isLoading?: boolean;
}

export interface WalletConnectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConnect: (account: string, walletName: string) => void;
}

// Redux Action Payload Types
export interface LoginPayload {
  email: string;
  password: string;
  deviceFingerprint?: string;
}

export interface RegisterPayload {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  phone: string;
}

export interface TwoFactorPayload {
  userId: string;
  token: string;
}

export interface TransactionHistoryParams {
  limit?: number;
  offset?: number;
  status?: string;
}

// Blockchain Context Types
export interface BlockchainContextType {
  account: string | null;
  isConnected: boolean;
  balance: string | null;
  provider: any;
  signer: any;
  chainId: number | null;
  connectWallet: () => Promise<string>;
  disconnectWallet: () => void;
  switchNetwork: (chainId: number) => Promise<void>;
  signMessage: (message: string) => Promise<string>;
}

// Auth Context Types
export interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  logout: () => void;
  register: (userData: RegisterCredentials) => Promise<void>;
}

// 2FA Types
export interface TwoFactorData {
  code: string;
}

// Window ethereum extension
declare global {
  interface Window {
    ethereum?: {
      isMetaMask?: boolean;
      isCoinbaseWallet?: boolean;
      isTrust?: boolean;
      request: (args: { method: string; params?: any[] }) => Promise<any>;
      on: (event: string, handler: (...args: any[]) => void) => void;
      removeListener: (
        event: string,
        handler: (...args: any[]) => void
      ) => void;
    };
  }
}
